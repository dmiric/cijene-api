services:
  db:
    container_name: pricemice-db-1
    build:
      context: .
      dockerfile: Dockerfile.postgres
    image: postgis/postgis:16-3.4
    ports:
      - "0.0.0.0:5432:5432"
    env_file:
      - ./.env
    volumes:
      - db_data:/var/lib/postgresql/data
      # - ./service/db/psql.sql:/docker-entrypoint-initdb.d/init.sql # Commented out to prevent automatic schema creation on startup
      - ./docker/db/init-croatian-fts.sh:/docker-entrypoint-initdb.d/init-croatian-fts.sh
      - ./docker/db/croatian.stop:/usr/share/postgresql/16/tsearch_data/croatian.stop
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitoring-network

  api:
    container_name: pricemice-api-1
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      # DB_DSN is now defined directly in .env
      REDIRECT_URL: http://localhost:8000/docs
      PYTHONUTF8: "1"
      PROMETHEUS_PUSHGATEWAY_URL: http://pushgateway:9091 # Added Pushgateway URL
    depends_on:
      db:
        condition: service_healthy
      tempo:
        # Add dependency on tempo
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
      - ./crawler_output:/app/crawler_output
    command: [ "sh", "-c", "sleep 5 && python -m uvicorn service.main:app --host 0.0.0.0 --port 8000" ]
    networks:
      - monitoring-network

  pgadmin:
    container_name: pricemice-pgadmin-1
    image: dpage/pgadmin4
    env_file:
      - ./.env
    environment:
      # This disables the "Set Master Password" prompt on first launch.
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      # This disables the user login screen entirely.
      PGADMIN_CONFIG_AUTHENTICATION_SOURCES: "[]"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    depends_on:
      - db
    ports:
      - "127.0.0.1:80:80" # Expose pgAdmin to the host's loopback interface
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - db_backups:/var/lib/pgadmin/backups
      - ./pgadmin/preferences.json:/pgadmin4/preferences.json
    networks:
      - monitoring-network

  backup:
    container_name: pricemice-backup-1
    image: postgis/postgis:16-3.4
    env_file:
      - ./.env
    volumes:
      - db_backups:/backups
      - ./scripts:/scripts
    depends_on:
      db:
        condition: service_healthy
    command: [ "tail", "-f", "/dev/null" ]
    networks:
      - monitoring-network

  pushgateway:
    # Added Pushgateway service
    container_name: pricemice-pushgateway-1
    image: prom/pushgateway:v1.11.1
    ports:
      - "9091:9091"
    command:
      - '--web.listen-address=:9091'
    networks:
      - monitoring-network

  prometheus:
    container_name: pricemice-prometheus-1
    image: prom/prometheus:v3.5.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    depends_on:
      - api
      - pushgateway # Added dependency on pushgateway
    networks:
      - monitoring-network

  grafana:
    container_name: pricemice-grafana-1
    image: grafana/grafana:12.2.0-16711121739
    ports:
      - "127.0.0.1:3000:3000"
    env_file:
      - ./.env
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    depends_on:
      - prometheus
      - loki # Added dependency on loki
      - tempo # Added dependency on tempo
    networks:
      - monitoring-network

  loki:
    container_name: pricemice-loki-1
    image: grafana/loki:k266-ec53492
    user: root # Added this line
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml # Mount Loki configuration
    networks:
      - monitoring-network

  alloy:
    container_name: pricemice-alloy-1
    # THIS IS THE CRITICAL LINE THAT MUST BE CORRECT
    image: grafana/alloy:v1.1.0
    restart: unless-stopped
    volumes:
      # Mount the Docker socket as read-only for better security
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Your config file needs access to the host log paths. Mount as read-only.
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # Your Alloy config file
      - ./alloy/alloy-config.alloy:/etc/alloy/config.alloy
      # A persistent volume for Alloy's data (like log positions)
      - alloy_data:/data
    command:
      - "run"
      - "/etc/alloy/config.alloy"
      # This flag tells Alloy where to store its data inside the container
      - "--storage.path=/data"
    depends_on:
      - loki
    networks:
      - monitoring-network

  tempo:
    container_name: pricemice-tempo-1
    image: grafana/tempo:2.8.1
    user: root # Added this line to fix permission denied error
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/data/tempo
    ports:
      - "14268:14268" # Jaeger gRPC
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "3200:3200" # Tempo HTTP (for readiness, metrics, etc.)
    healthcheck:
      # Use wget, which is a standard utility, to check the readiness endpoint.
      # This is often more reliable than app-specific CLIs.
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s # Increased start period just to be safe
    networks:
      - monitoring-network

volumes:
  db_data:
  alloy_data:
  pgadmin_data:
  db_backups:
  loki_data:
  tempo_data:
    # New volume for Tempo

networks:
  monitoring-network:
    driver: bridge
