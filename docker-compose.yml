version: '3.8'

services:
  db:
    image: postgis/postgis:16-3.4
    env_file:
      - ./.env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./service/db/psql.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      DB_DSN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIRECT_URL: http://localhost:8000/docs
      PYTHONUTF8: "1"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
      - crawler_data:/app/crawler_output
    command: [ "sh", "-c", "python service/db/migrate.py && python -m uvicorn service.main:app --host 0.0.0.0 --port 8000" ]

  crawler:
    build: .
    environment:
      DB_DSN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PYTHONUTF8: "1"
    depends_on:
      - db
    volumes:
      - crawler_data:/app/output
    command: [ "tail", "-f", "/dev/null" ]

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./.env
    depends_on:
      - db
    ports:
      - "127.0.0.1:80:80" # Expose pgAdmin to the host's loopback interface
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json

  backup:
    image: postgis/postgis:16-3.4
    env_file:
      - ./.env
    volumes:
      - db_backups:/backups
      - ./scripts:/scripts
    depends_on:
      db:
        condition: service_healthy
    command: [ "tail", "-f", "/dev/null" ]

volumes:
  db_data:
  pgadmin_data:
  crawler_data:
  db_backups:
