name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ secrets.CR_USERNAME }}
        password: ${{ secrets.CR_TOKEN }}

    - name: Extract metadata (tags) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=sha,format=long
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64 # Specify target platform to avoid unnecessary multi-platform builds
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Configure Cron Job
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Remove any existing hetzner-worker cron jobs to prevent duplicates
          (crontab -l 2>/dev/null | grep -v 'hetzner-worker') | crontab -
          # Add the new cron job: run every hour from 6 AM to 10 AM UTC
          # Escaping: \$ for cron to evaluate date command, \\\\% for cron to interpret % literally
          (crontab -l 2>/dev/null; echo "0 6-10 * * * cd /home/dmiric/pricemice && mkdir -p logs && /usr/bin/make hetzner-worker >> /home/dmiric/pricemice/logs/hetzner-worker-\$(date +\\\\%Y\\\\%m\\\\%d_\\\\%H\\\\%M\\\\%S).log 2>&1") | crontab -
          echo "Cron job for hetzner-worker configured."

    - name: Configure Swap Space
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Configure swap space if not already present
          if ! grep -q "swapfile" /proc/swaps; then
            echo "Configuring swap space..."
            sudo fallocate -l 4G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
            echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
            echo "Swap space configured."
          else
            echo "Swap space already configured."
          fi

    - name: Deploy Application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.APP_PATH }}
          git pull origin main # Pull the latest code from the main branch
          docker compose pull
          docker compose stop api || true # Stop the API container if it's running (ignore errors if not running)
          docker compose rm -f api || true # Remove the API container (ignore errors if not existing)
          docker compose up -d --remove-orphans
          make migrate-db # Apply database migrations
          docker image prune -f # Clean up old images
