name: CI/CD Pipeline

on:
  push:
    branches:
      - main

# Use environment variables to keep image names consistent and DRY
env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  # Convert owner and repo name to lowercase for Docker image tags

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.IMAGE_OWNER }}
        password: ${{ secrets.CR_TOKEN }}

    # ===================================================================
    # Build and push each custom service as a separate image
    # ===================================================================

    - name: Build and Push API Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile # Dockerfile for the API
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/api:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/api:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push DB Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.postgres # Dockerfile for the DB
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/db:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/db:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Alloy Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.alloy # Dockerfile for Alloy
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/alloy:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.REPO_NAME }}/alloy:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # ===================================================================
    # CONSOLIDATED SECTION: Configure server in a single, efficient step
    # ===================================================================
    - name: Configure Server (Timezone, Swap, and Cron Jobs)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # --- Set Server Timezone ---
          echo "--> Configuring server time and NTP synchronization..."
          sudo timedatectl set-timezone UTC
          sudo timedatectl set-ntp true
          
          # --- Configure Swap Space ---
          echo "--> Checking/Configuring swap space..."
          if ! grep -q "swapfile" /proc/swaps; then
            sudo fallocate -l 4G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
            echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
            echo "Swap space configured."
          else
            echo "Swap space already configured."
          fi

          # --- Configure Cron Jobs ---
          echo "--> Configuring cron jobs..."
          # Hetzner Worker (Old - with log redirection)
          # (crontab -l 2>/dev/null | grep -v 'hetzner-worker') | crontab -
          # (crontab -l 2>/dev/null; echo "0 8-12 * * * cd /home/dmiric/pricemice && mkdir -p logs/hetzner-worker && /usr/bin/make hetzner-worker >> /home/dmiric/pricemice/logs/hetzner-worker/hetzner-worker-$(date +\\\\%Y\\\\%m\\\\%d_\\\\%H\\\\%M\\\\%S).log 2>&1") | crontab -
          # Hetzner Worker (New - Docker manages logs)
          (crontab -l 2>/dev/null | grep -v 'hetzner-worker') | crontab -
          (crontab -l 2>/dev/null; echo "0 8-12 * * * cd /home/dmiric/pricemice && /usr/bin/make hetzner-worker") | crontab -
          
          # Golden Record Orchestrator (Old - with log redirection)
          # (crontab -l 2>/dev/null | grep -v 'golden-record-orchestrator') | crontab -
          # (crontab -l 2>/dev/null; echo "30 * * * * cd /home/dmiric/pricemice && mkdir -p logs/golden-record && docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm --name pricemice-golden-record-1 api python -m service.normaliser.golden_record.orchestrator_golden_records --normalizer-type grok --embedder-type gemini --num-workers 2 --batch-size 200 >> /home/dmiric/pricemice/logs/golden-record/golden-record-orchestrator-\$(date +\\\\%Y\\\\%m\\\\%d_\\\\%H\\\\%M\\\\%S).log 2>&1") | crontab -
          # Golden Record Orchestrator (New - Docker manages logs)
          (crontab -l 2>/dev/null | grep -v 'golden-record-orchestrator') | crontab -
          (crontab -l 2>/dev/null; echo "30 * * * * cd /home/dmiric/pricemice && docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm --name pricemice-golden-record-1 api python -m service.normaliser.golden_record.orchestrator_golden_records --normalizer-type grok --embedder-type gemini --num-workers 2 --batch-size 200") | crontab -
          
          # Price Calculation (Old - with log redirection)
          # (crontab -l 2>/dev/null | grep -v 'price-calculation') | crontab -
          # (crontab -l 2>/dev/null; echo "50 * * * * cd /home/dmiric/pricemice && mkdir -p logs/calculate-prices && docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm --name pricemice-calc-prices-1 --env api python -m service.normaliser.orchestrator_prices --num-workers 1 --batch-size 10000 >> /home/dmiric/pricemice/logs/calculate-prices/price-calculation-\$(date +\\\\%Y\\\\%m\\\\%d_\\\\%H\\\\%M\\\\%S).log 2>&1") | crontab -
          # Price Calculation (New - Docker manages logs)
          (crontab -l 2>/dev/null | grep -v 'price-calculation') | crontab -
          (crontab -l 2>/dev/null; echo "50 * * * * cd /home/dmiric/pricemice && docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm --name pricemice-calc-prices-1 --env api python -m service.normaliser.orchestrator_prices --num-workers 1 --batch-size 10000") | crontab -
          
          echo "All cron jobs configured."

    # ===================================================================
    # REPLACED SECTION: Deploy using pre-built images and override file
    # ===================================================================
    - name: Deploy Application with Pre-built Images
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "--> Starting deployment..."
          cd ${{ secrets.APP_PATH }}
          
          echo "--> Pulling latest compose files from git..."
          git pull origin main

          echo "--> Logging into GitHub Container Registry..."
          echo ${{ secrets.CR_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ env.IMAGE_OWNER }} --password-stdin
          
          echo "--> Setting image tag for this deployment..."
          export IMAGE_TAG=${{ github.sha }}
          export LOWER_IMAGE_OWNER=$(echo "${{ env.IMAGE_OWNER }}" | tr '[:upper:]' '[:lower:]')
          export LOWER_REPO_NAME=$(echo "${{ env.REPO_NAME }}" | tr '[:upper:]' '[:lower:]')

          echo "--> Pulling new container images: ${{ env.IMAGE_TAG }}"
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull

          echo "--> Restarting services with new images..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans

          echo "--> Applying database migrations..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T api python service/db/migrate.py

          echo "--> Cleaning up old Docker images..."
          docker image prune -af

          echo "--> Deployment successful!"
